<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1349.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="940"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="0.0000%" y="1045" width="0.1064%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>deno`deno_graph::graph::parse_module (1 samples, 0.11%)</title><rect x="0.0000%" y="1029" width="0.1064%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>deno`&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer as deno_graph::analyzer::ModuleAnalyzer&gt;::analyze (1 samples, 0.11%)</title><rect x="0.0000%" y="1013" width="0.1064%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>deno`&lt;deno_graph::ast::DefaultModuleAnalyzer as deno_graph::analyzer::ModuleAnalyzer&gt;::analyze (1 samples, 0.11%)</title><rect x="0.0000%" y="997" width="0.1064%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>deno`&lt;deno_graph::ast::CapturingModuleParser as deno_graph::ast::ModuleParser&gt;::parse_module (1 samples, 0.11%)</title><rect x="0.0000%" y="981" width="0.1064%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>deno`&lt;deno_graph::ast::DefaultModuleParser as deno_graph::ast::ModuleParser&gt;::parse_module (1 samples, 0.11%)</title><rect x="0.0000%" y="965" width="0.1064%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>deno`deno_ast::parsing::parse_module (1 samples, 0.11%)</title><rect x="0.0000%" y="949" width="0.1064%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>deno`deno_ast::parsing::parse_string_input (1 samples, 0.11%)</title><rect x="0.0000%" y="933" width="0.1064%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>deno`swc_ecma_parser::parser::Parser&lt;I&gt;::parse_module (1 samples, 0.11%)</title><rect x="0.0000%" y="917" width="0.1064%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>deno`swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_block_body (1 samples, 0.11%)</title><rect x="0.0000%" y="901" width="0.1064%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>deno`swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_stmt_internal (1 samples, 0.11%)</title><rect x="0.0000%" y="885" width="0.1064%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="869" width="0.1064%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="853" width="0.1064%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr_base (1 samples, 0.11%)</title><rect x="0.0000%" y="837" width="0.1064%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::finish_assignment_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="821" width="0.1064%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="805" width="0.1064%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr_base (1 samples, 0.11%)</title><rect x="0.0000%" y="789" width="0.1064%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="773" width="0.1064%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_assignment_expr_base (1 samples, 0.11%)</title><rect x="0.0000%" y="757" width="0.1064%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>deno`swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser::parser::Parser&lt;I&gt;&gt;::parse_bin_expr (1 samples, 0.11%)</title><rect x="0.0000%" y="741" width="0.1064%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>deno`OUTLINED_FUNCTION_184 (1 samples, 0.11%)</title><rect x="0.0000%" y="725" width="0.1064%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="0.0000%" y="1093" width="0.2128%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.21%)</title><rect x="0.0000%" y="1077" width="0.2128%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1087.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (2 samples, 0.21%)</title><rect x="0.0000%" y="1061" width="0.2128%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn deno_graph::analyzer::ModuleAnalyzer&gt;&gt; (1 samples, 0.11%)</title><rect x="0.1064%" y="1045" width="0.1064%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.3564%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer&gt; (1 samples, 0.11%)</title><rect x="0.1064%" y="1029" width="0.1064%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.3564%" y="1039.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;rusqlite::Connection&gt; (1 samples, 0.11%)</title><rect x="0.1064%" y="1013" width="0.1064%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.3564%" y="1023.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rusqlite::inner_connection::InnerConnection&gt;&gt; (1 samples, 0.11%)</title><rect x="0.1064%" y="997" width="0.1064%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.3564%" y="1007.50"></text></g><g><title>deno`sqlite3Close (1 samples, 0.11%)</title><rect x="0.1064%" y="981" width="0.1064%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.3564%" y="991.50"></text></g><g><title>deno`sqlite3LeaveMutexAndCloseZombie (1 samples, 0.11%)</title><rect x="0.1064%" y="965" width="0.1064%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.3564%" y="975.50"></text></g><g><title>deno`sqlite3BtreeClose (1 samples, 0.11%)</title><rect x="0.1064%" y="949" width="0.1064%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.3564%" y="959.50"></text></g><g><title>deno`sqlite3PagerClose (1 samples, 0.11%)</title><rect x="0.1064%" y="933" width="0.1064%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="0.3564%" y="943.50"></text></g><g><title>deno`sqlite3WalClose (1 samples, 0.11%)</title><rect x="0.1064%" y="917" width="0.1064%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="0.3564%" y="927.50"></text></g><g><title>deno`unixShmUnmap (1 samples, 0.11%)</title><rect x="0.1064%" y="901" width="0.1064%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="0.3564%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (1 samples, 0.11%)</title><rect x="0.1064%" y="885" width="0.1064%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="0.3564%" y="895.50"></text></g><g><title>0x14004b42c (1 samples, 0.11%)</title><rect x="0.2128%" y="869" width="0.1064%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.4628%" y="879.50"></text></g><g><title>0x14004b448 (1 samples, 0.11%)</title><rect x="0.3191%" y="869" width="0.1064%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.5691%" y="879.50"></text></g><g><title>0x14004a5d8 (3 samples, 0.32%)</title><rect x="0.2128%" y="885" width="0.3191%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="3"/><text x="0.4628%" y="895.50"></text></g><g><title>0x14004b4e4 (1 samples, 0.11%)</title><rect x="0.4255%" y="869" width="0.1064%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.6755%" y="879.50"></text></g><g><title>0x14004a648 (1 samples, 0.11%)</title><rect x="0.5319%" y="885" width="0.1064%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.7819%" y="895.50"></text></g><g><title>0x14004bb84 (3 samples, 0.32%)</title><rect x="0.6383%" y="885" width="0.3191%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="3"/><text x="0.8883%" y="895.50"></text></g><g><title>0x14004bba0 (1 samples, 0.11%)</title><rect x="0.9574%" y="885" width="0.1064%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="1.2074%" y="895.50"></text></g><g><title>0x14004bbb0 (2 samples, 0.21%)</title><rect x="1.0638%" y="885" width="0.2128%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="2"/><text x="1.3138%" y="895.50"></text></g><g><title>0x14004bbe0 (8 samples, 0.85%)</title><rect x="1.2766%" y="885" width="0.8511%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="8"/><text x="1.5266%" y="895.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (8 samples, 0.85%)</title><rect x="2.1277%" y="869" width="0.8511%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="8"/><text x="2.3777%" y="879.50"></text></g><g><title>0x14004bbe8 (30 samples, 3.19%)</title><rect x="2.1277%" y="885" width="3.1915%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="30"/><text x="2.3777%" y="895.50">0x1..</text></g><g><title>deno`Builtins_LoadIC (22 samples, 2.34%)</title><rect x="2.9787%" y="869" width="2.3404%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="22"/><text x="3.2287%" y="879.50">d..</text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (13 samples, 1.38%)</title><rect x="3.9362%" y="853" width="1.3830%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="13"/><text x="4.1862%" y="863.50"></text></g><g><title>0x14004bc18 (4 samples, 0.43%)</title><rect x="5.3191%" y="885" width="0.4255%" height="15" fill="rgb(239,60,40)" fg:x="50" fg:w="4"/><text x="5.5691%" y="895.50"></text></g><g><title>0x14004bc3c (4 samples, 0.43%)</title><rect x="5.7447%" y="885" width="0.4255%" height="15" fill="rgb(206,27,48)" fg:x="54" fg:w="4"/><text x="5.9947%" y="895.50"></text></g><g><title>0x14004bc4c (3 samples, 0.32%)</title><rect x="6.1702%" y="885" width="0.3191%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="3"/><text x="6.4202%" y="895.50"></text></g><g><title>0x14004bca8 (1 samples, 0.11%)</title><rect x="6.4894%" y="885" width="0.1064%" height="15" fill="rgb(250,213,24)" fg:x="61" fg:w="1"/><text x="6.7394%" y="895.50"></text></g><g><title>0x14004bcd4 (9 samples, 0.96%)</title><rect x="6.5957%" y="885" width="0.9574%" height="15" fill="rgb(247,123,22)" fg:x="62" fg:w="9"/><text x="6.8457%" y="895.50"></text></g><g><title>0x1088d6fd4 (3 samples, 0.32%)</title><rect x="7.5532%" y="869" width="0.3191%" height="15" fill="rgb(231,138,38)" fg:x="71" fg:w="3"/><text x="7.8032%" y="879.50"></text></g><g><title>0x12000802c (2 samples, 0.21%)</title><rect x="7.8723%" y="869" width="0.2128%" height="15" fill="rgb(231,145,46)" fg:x="74" fg:w="2"/><text x="8.1223%" y="879.50"></text></g><g><title>0x1088d6f30 (3 samples, 0.32%)</title><rect x="8.0851%" y="853" width="0.3191%" height="15" fill="rgb(251,118,11)" fg:x="76" fg:w="3"/><text x="8.3351%" y="863.50"></text></g><g><title>0x1088d6f6c (12 samples, 1.28%)</title><rect x="8.4043%" y="853" width="1.2766%" height="15" fill="rgb(217,147,25)" fg:x="79" fg:w="12"/><text x="8.6543%" y="863.50"></text></g><g><title>0x1088d7128 (5 samples, 0.53%)</title><rect x="9.6809%" y="837" width="0.5319%" height="15" fill="rgb(247,81,37)" fg:x="91" fg:w="5"/><text x="9.9309%" y="847.50"></text></g><g><title>0x1088d71ac (4 samples, 0.43%)</title><rect x="10.2128%" y="837" width="0.4255%" height="15" fill="rgb(209,12,38)" fg:x="96" fg:w="4"/><text x="10.4628%" y="847.50"></text></g><g><title>0x1088d71e4 (4 samples, 0.43%)</title><rect x="10.6383%" y="837" width="0.4255%" height="15" fill="rgb(227,1,9)" fg:x="100" fg:w="4"/><text x="10.8883%" y="847.50"></text></g><g><title>0x1088d7200 (5 samples, 0.53%)</title><rect x="11.0638%" y="837" width="0.5319%" height="15" fill="rgb(248,47,43)" fg:x="104" fg:w="5"/><text x="11.3138%" y="847.50"></text></g><g><title>0x1088d720c (2 samples, 0.21%)</title><rect x="11.5957%" y="837" width="0.2128%" height="15" fill="rgb(221,10,30)" fg:x="109" fg:w="2"/><text x="11.8457%" y="847.50"></text></g><g><title>0x1088d7214 (4 samples, 0.43%)</title><rect x="11.8085%" y="837" width="0.4255%" height="15" fill="rgb(210,229,1)" fg:x="111" fg:w="4"/><text x="12.0585%" y="847.50"></text></g><g><title>0x1088d7238 (5 samples, 0.53%)</title><rect x="12.2340%" y="837" width="0.5319%" height="15" fill="rgb(222,148,37)" fg:x="115" fg:w="5"/><text x="12.4840%" y="847.50"></text></g><g><title>0x1088d7280 (4 samples, 0.43%)</title><rect x="12.7660%" y="837" width="0.4255%" height="15" fill="rgb(234,67,33)" fg:x="120" fg:w="4"/><text x="13.0160%" y="847.50"></text></g><g><title>0x1088d7294 (2 samples, 0.21%)</title><rect x="13.1915%" y="837" width="0.2128%" height="15" fill="rgb(247,98,35)" fg:x="124" fg:w="2"/><text x="13.4415%" y="847.50"></text></g><g><title>0x1088d72dc (3 samples, 0.32%)</title><rect x="13.4043%" y="837" width="0.3191%" height="15" fill="rgb(247,138,52)" fg:x="126" fg:w="3"/><text x="13.6543%" y="847.50"></text></g><g><title>0x1088d7308 (2 samples, 0.21%)</title><rect x="13.7234%" y="837" width="0.2128%" height="15" fill="rgb(213,79,30)" fg:x="129" fg:w="2"/><text x="13.9734%" y="847.50"></text></g><g><title>0x1088d731c (2 samples, 0.21%)</title><rect x="13.9362%" y="837" width="0.2128%" height="15" fill="rgb(246,177,23)" fg:x="131" fg:w="2"/><text x="14.1862%" y="847.50"></text></g><g><title>0x1088d7338 (3 samples, 0.32%)</title><rect x="14.1489%" y="837" width="0.3191%" height="15" fill="rgb(230,62,27)" fg:x="133" fg:w="3"/><text x="14.3989%" y="847.50"></text></g><g><title>0x1088d7358 (5 samples, 0.53%)</title><rect x="14.4681%" y="837" width="0.5319%" height="15" fill="rgb(216,154,8)" fg:x="136" fg:w="5"/><text x="14.7181%" y="847.50"></text></g><g><title>0x1088d7370 (1 samples, 0.11%)</title><rect x="15.0000%" y="837" width="0.1064%" height="15" fill="rgb(244,35,45)" fg:x="141" fg:w="1"/><text x="15.2500%" y="847.50"></text></g><g><title>0x1088d7384 (3 samples, 0.32%)</title><rect x="15.1064%" y="837" width="0.3191%" height="15" fill="rgb(251,115,12)" fg:x="142" fg:w="3"/><text x="15.3564%" y="847.50"></text></g><g><title>0x1088d73b0 (1 samples, 0.11%)</title><rect x="15.4255%" y="837" width="0.1064%" height="15" fill="rgb(240,54,50)" fg:x="145" fg:w="1"/><text x="15.6755%" y="847.50"></text></g><g><title>0x1088d77c0 (3 samples, 0.32%)</title><rect x="15.7447%" y="821" width="0.3191%" height="15" fill="rgb(233,84,52)" fg:x="148" fg:w="3"/><text x="15.9947%" y="831.50"></text></g><g><title>0x1088d77c4 (7 samples, 0.74%)</title><rect x="16.0638%" y="821" width="0.7447%" height="15" fill="rgb(207,117,47)" fg:x="151" fg:w="7"/><text x="16.3138%" y="831.50"></text></g><g><title>0x1088d73c0 (16 samples, 1.70%)</title><rect x="15.5319%" y="837" width="1.7021%" height="15" fill="rgb(249,43,39)" fg:x="146" fg:w="16"/><text x="15.7819%" y="847.50"></text></g><g><title>0x1088d7900 (4 samples, 0.43%)</title><rect x="16.8085%" y="821" width="0.4255%" height="15" fill="rgb(209,38,44)" fg:x="158" fg:w="4"/><text x="17.0585%" y="831.50"></text></g><g><title>0x1088d73cc (4 samples, 0.43%)</title><rect x="17.2340%" y="837" width="0.4255%" height="15" fill="rgb(236,212,23)" fg:x="162" fg:w="4"/><text x="17.4840%" y="847.50"></text></g><g><title>0x1088d6f74 (77 samples, 8.19%)</title><rect x="9.6809%" y="853" width="8.1915%" height="15" fill="rgb(242,79,21)" fg:x="91" fg:w="77"/><text x="9.9309%" y="863.50">0x1088d6f74</text></g><g><title>0x1088d7930 (2 samples, 0.21%)</title><rect x="17.6596%" y="837" width="0.2128%" height="15" fill="rgb(211,96,35)" fg:x="166" fg:w="2"/><text x="17.9096%" y="847.50"></text></g><g><title>0x1088d6f84 (3 samples, 0.32%)</title><rect x="17.8723%" y="853" width="0.3191%" height="15" fill="rgb(253,215,40)" fg:x="168" fg:w="3"/><text x="18.1223%" y="863.50"></text></g><g><title>0x1088d6f94 (3 samples, 0.32%)</title><rect x="18.1915%" y="853" width="0.3191%" height="15" fill="rgb(211,81,21)" fg:x="171" fg:w="3"/><text x="18.4415%" y="863.50"></text></g><g><title>0x1088d6fac (1 samples, 0.11%)</title><rect x="18.5106%" y="853" width="0.1064%" height="15" fill="rgb(208,190,38)" fg:x="174" fg:w="1"/><text x="18.7606%" y="863.50"></text></g><g><title>0x1088d7e28 (3 samples, 0.32%)</title><rect x="18.6170%" y="853" width="0.3191%" height="15" fill="rgb(235,213,38)" fg:x="175" fg:w="3"/><text x="18.8670%" y="863.50"></text></g><g><title>0x120008034 (112 samples, 11.91%)</title><rect x="8.0851%" y="869" width="11.9149%" height="15" fill="rgb(237,122,38)" fg:x="76" fg:w="112"/><text x="8.3351%" y="879.50">0x120008034</text></g><g><title>libsystem_platform.dylib`_platform_strncmp (10 samples, 1.06%)</title><rect x="18.9362%" y="853" width="1.0638%" height="15" fill="rgb(244,218,35)" fg:x="178" fg:w="10"/><text x="19.1862%" y="863.50"></text></g><g><title>0x120008038 (5 samples, 0.53%)</title><rect x="20.0000%" y="869" width="0.5319%" height="15" fill="rgb(240,68,47)" fg:x="188" fg:w="5"/><text x="20.2500%" y="879.50"></text></g><g><title>0x14004bcd8 (125 samples, 13.30%)</title><rect x="7.5532%" y="885" width="13.2979%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="125"/><text x="7.8032%" y="895.50">0x14004bcd8</text></g><g><title>0x120008064 (3 samples, 0.32%)</title><rect x="20.5319%" y="869" width="0.3191%" height="15" fill="rgb(235,124,12)" fg:x="193" fg:w="3"/><text x="20.7819%" y="879.50"></text></g><g><title>0x14004bcf8 (8 samples, 0.85%)</title><rect x="20.8511%" y="885" width="0.8511%" height="15" fill="rgb(224,169,11)" fg:x="196" fg:w="8"/><text x="21.1011%" y="895.50"></text></g><g><title>0x14004bd0c (4 samples, 0.43%)</title><rect x="21.7021%" y="885" width="0.4255%" height="15" fill="rgb(250,166,2)" fg:x="204" fg:w="4"/><text x="21.9521%" y="895.50"></text></g><g><title>0x14004bd28 (2 samples, 0.21%)</title><rect x="22.1277%" y="885" width="0.2128%" height="15" fill="rgb(242,216,29)" fg:x="208" fg:w="2"/><text x="22.3777%" y="895.50"></text></g><g><title>0x14004c158 (1 samples, 0.11%)</title><rect x="22.3404%" y="885" width="0.1064%" height="15" fill="rgb(230,116,27)" fg:x="210" fg:w="1"/><text x="22.5904%" y="895.50"></text></g><g><title>0x14004c164 (5 samples, 0.53%)</title><rect x="22.4468%" y="885" width="0.5319%" height="15" fill="rgb(228,99,48)" fg:x="211" fg:w="5"/><text x="22.6968%" y="895.50"></text></g><g><title>0x14004c178 (3 samples, 0.32%)</title><rect x="22.9787%" y="885" width="0.3191%" height="15" fill="rgb(253,11,6)" fg:x="216" fg:w="3"/><text x="23.2287%" y="895.50"></text></g><g><title>0x14004c180 (2 samples, 0.21%)</title><rect x="23.2979%" y="885" width="0.2128%" height="15" fill="rgb(247,143,39)" fg:x="219" fg:w="2"/><text x="23.5479%" y="895.50"></text></g><g><title>0x14004c190 (5 samples, 0.53%)</title><rect x="23.5106%" y="885" width="0.5319%" height="15" fill="rgb(236,97,10)" fg:x="221" fg:w="5"/><text x="23.7606%" y="895.50"></text></g><g><title>0x14004c19c (1 samples, 0.11%)</title><rect x="24.0426%" y="885" width="0.1064%" height="15" fill="rgb(233,208,19)" fg:x="226" fg:w="1"/><text x="24.2926%" y="895.50"></text></g><g><title>0x14004c1c4 (2 samples, 0.21%)</title><rect x="24.1489%" y="885" width="0.2128%" height="15" fill="rgb(216,164,2)" fg:x="227" fg:w="2"/><text x="24.3989%" y="895.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (8 samples, 0.85%)</title><rect x="24.3617%" y="869" width="0.8511%" height="15" fill="rgb(220,129,5)" fg:x="229" fg:w="8"/><text x="24.6117%" y="879.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.21%)</title><rect x="25.2128%" y="869" width="0.2128%" height="15" fill="rgb(242,17,10)" fg:x="237" fg:w="2"/><text x="25.4628%" y="879.50"></text></g><g><title>0x14004c1cc (34 samples, 3.62%)</title><rect x="24.3617%" y="885" width="3.6170%" height="15" fill="rgb(242,107,0)" fg:x="229" fg:w="34"/><text x="24.6117%" y="895.50">0x14..</text></g><g><title>deno`Builtins_LoadIC (24 samples, 2.55%)</title><rect x="25.4255%" y="869" width="2.5532%" height="15" fill="rgb(251,28,31)" fg:x="239" fg:w="24"/><text x="25.6755%" y="879.50">de..</text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (13 samples, 1.38%)</title><rect x="26.5957%" y="853" width="1.3830%" height="15" fill="rgb(233,223,10)" fg:x="250" fg:w="13"/><text x="26.8457%" y="863.50"></text></g><g><title>0x14004c1fc (1 samples, 0.11%)</title><rect x="27.9787%" y="885" width="0.1064%" height="15" fill="rgb(215,21,27)" fg:x="263" fg:w="1"/><text x="28.2287%" y="895.50"></text></g><g><title>0x14004c220 (1 samples, 0.11%)</title><rect x="28.0851%" y="885" width="0.1064%" height="15" fill="rgb(232,23,21)" fg:x="264" fg:w="1"/><text x="28.3351%" y="895.50"></text></g><g><title>0x14004c230 (5 samples, 0.53%)</title><rect x="28.1915%" y="885" width="0.5319%" height="15" fill="rgb(244,5,23)" fg:x="265" fg:w="5"/><text x="28.4415%" y="895.50"></text></g><g><title>0x14004c28c (1 samples, 0.11%)</title><rect x="28.7234%" y="885" width="0.1064%" height="15" fill="rgb(226,81,46)" fg:x="270" fg:w="1"/><text x="28.9734%" y="895.50"></text></g><g><title>0x14004c2b8 (8 samples, 0.85%)</title><rect x="28.8298%" y="885" width="0.8511%" height="15" fill="rgb(247,70,30)" fg:x="271" fg:w="8"/><text x="29.0798%" y="895.50"></text></g><g><title>0x1088d6fd4 (6 samples, 0.64%)</title><rect x="29.6809%" y="869" width="0.6383%" height="15" fill="rgb(212,68,19)" fg:x="279" fg:w="6"/><text x="29.9309%" y="879.50"></text></g><g><title>0x12000802c (3 samples, 0.32%)</title><rect x="30.3191%" y="869" width="0.3191%" height="15" fill="rgb(240,187,13)" fg:x="285" fg:w="3"/><text x="30.5691%" y="879.50"></text></g><g><title>0x1088d6f30 (5 samples, 0.53%)</title><rect x="30.6383%" y="853" width="0.5319%" height="15" fill="rgb(223,113,26)" fg:x="288" fg:w="5"/><text x="30.8883%" y="863.50"></text></g><g><title>0x1088d6f6c (13 samples, 1.38%)</title><rect x="31.1702%" y="853" width="1.3830%" height="15" fill="rgb(206,192,2)" fg:x="293" fg:w="13"/><text x="31.4202%" y="863.50"></text></g><g><title>0x1088d7128 (4 samples, 0.43%)</title><rect x="32.5532%" y="837" width="0.4255%" height="15" fill="rgb(241,108,4)" fg:x="306" fg:w="4"/><text x="32.8032%" y="847.50"></text></g><g><title>0x1088d71ac (2 samples, 0.21%)</title><rect x="32.9787%" y="837" width="0.2128%" height="15" fill="rgb(247,173,49)" fg:x="310" fg:w="2"/><text x="33.2287%" y="847.50"></text></g><g><title>0x1088d71e4 (1 samples, 0.11%)</title><rect x="33.1915%" y="837" width="0.1064%" height="15" fill="rgb(224,114,35)" fg:x="312" fg:w="1"/><text x="33.4415%" y="847.50"></text></g><g><title>0x1088d7200 (5 samples, 0.53%)</title><rect x="33.2979%" y="837" width="0.5319%" height="15" fill="rgb(245,159,27)" fg:x="313" fg:w="5"/><text x="33.5479%" y="847.50"></text></g><g><title>0x1088d7214 (4 samples, 0.43%)</title><rect x="33.8298%" y="837" width="0.4255%" height="15" fill="rgb(245,172,44)" fg:x="318" fg:w="4"/><text x="34.0798%" y="847.50"></text></g><g><title>0x1088d7238 (4 samples, 0.43%)</title><rect x="34.2553%" y="837" width="0.4255%" height="15" fill="rgb(236,23,11)" fg:x="322" fg:w="4"/><text x="34.5053%" y="847.50"></text></g><g><title>0x1088d7280 (4 samples, 0.43%)</title><rect x="34.6809%" y="837" width="0.4255%" height="15" fill="rgb(205,117,38)" fg:x="326" fg:w="4"/><text x="34.9309%" y="847.50"></text></g><g><title>0x1088d7294 (1 samples, 0.11%)</title><rect x="35.1064%" y="837" width="0.1064%" height="15" fill="rgb(237,72,25)" fg:x="330" fg:w="1"/><text x="35.3564%" y="847.50"></text></g><g><title>0x1088d72dc (4 samples, 0.43%)</title><rect x="35.2128%" y="837" width="0.4255%" height="15" fill="rgb(244,70,9)" fg:x="331" fg:w="4"/><text x="35.4628%" y="847.50"></text></g><g><title>0x1088d72f8 (2 samples, 0.21%)</title><rect x="35.6383%" y="837" width="0.2128%" height="15" fill="rgb(217,125,39)" fg:x="335" fg:w="2"/><text x="35.8883%" y="847.50"></text></g><g><title>0x1088d7308 (4 samples, 0.43%)</title><rect x="35.8511%" y="837" width="0.4255%" height="15" fill="rgb(235,36,10)" fg:x="337" fg:w="4"/><text x="36.1011%" y="847.50"></text></g><g><title>0x1088d731c (2 samples, 0.21%)</title><rect x="36.2766%" y="837" width="0.2128%" height="15" fill="rgb(251,123,47)" fg:x="341" fg:w="2"/><text x="36.5266%" y="847.50"></text></g><g><title>0x1088d7338 (6 samples, 0.64%)</title><rect x="36.4894%" y="837" width="0.6383%" height="15" fill="rgb(221,13,13)" fg:x="343" fg:w="6"/><text x="36.7394%" y="847.50"></text></g><g><title>0x1088d7358 (5 samples, 0.53%)</title><rect x="37.1277%" y="837" width="0.5319%" height="15" fill="rgb(238,131,9)" fg:x="349" fg:w="5"/><text x="37.3777%" y="847.50"></text></g><g><title>0x1088d7370 (5 samples, 0.53%)</title><rect x="37.6596%" y="837" width="0.5319%" height="15" fill="rgb(211,50,8)" fg:x="354" fg:w="5"/><text x="37.9096%" y="847.50"></text></g><g><title>0x1088d7384 (5 samples, 0.53%)</title><rect x="38.1915%" y="837" width="0.5319%" height="15" fill="rgb(245,182,24)" fg:x="359" fg:w="5"/><text x="38.4415%" y="847.50"></text></g><g><title>0x1088d73b0 (2 samples, 0.21%)</title><rect x="38.7234%" y="837" width="0.2128%" height="15" fill="rgb(242,14,37)" fg:x="364" fg:w="2"/><text x="38.9734%" y="847.50"></text></g><g><title>0x1088d77c0 (1 samples, 0.11%)</title><rect x="39.2553%" y="821" width="0.1064%" height="15" fill="rgb(246,228,12)" fg:x="369" fg:w="1"/><text x="39.5053%" y="831.50"></text></g><g><title>0x1088d77c4 (1 samples, 0.11%)</title><rect x="39.3617%" y="821" width="0.1064%" height="15" fill="rgb(213,55,15)" fg:x="370" fg:w="1"/><text x="39.6117%" y="831.50"></text></g><g><title>0x1088d73c0 (7 samples, 0.74%)</title><rect x="38.9362%" y="837" width="0.7447%" height="15" fill="rgb(209,9,3)" fg:x="366" fg:w="7"/><text x="39.1862%" y="847.50"></text></g><g><title>0x1088d7900 (2 samples, 0.21%)</title><rect x="39.4681%" y="821" width="0.2128%" height="15" fill="rgb(230,59,30)" fg:x="371" fg:w="2"/><text x="39.7181%" y="831.50"></text></g><g><title>0x1088d6f74 (69 samples, 7.34%)</title><rect x="32.5532%" y="853" width="7.3404%" height="15" fill="rgb(209,121,21)" fg:x="306" fg:w="69"/><text x="32.8032%" y="863.50">0x1088d6f74</text></g><g><title>0x1088d7930 (2 samples, 0.21%)</title><rect x="39.6809%" y="837" width="0.2128%" height="15" fill="rgb(220,109,13)" fg:x="373" fg:w="2"/><text x="39.9309%" y="847.50"></text></g><g><title>0x1088d6f84 (3 samples, 0.32%)</title><rect x="39.8936%" y="853" width="0.3191%" height="15" fill="rgb(232,18,1)" fg:x="375" fg:w="3"/><text x="40.1436%" y="863.50"></text></g><g><title>0x1088d6f94 (2 samples, 0.21%)</title><rect x="40.2128%" y="853" width="0.2128%" height="15" fill="rgb(215,41,42)" fg:x="378" fg:w="2"/><text x="40.4628%" y="863.50"></text></g><g><title>0x1088d7e28 (5 samples, 0.53%)</title><rect x="40.4255%" y="853" width="0.5319%" height="15" fill="rgb(224,123,36)" fg:x="380" fg:w="5"/><text x="40.6755%" y="863.50"></text></g><g><title>0x120008034 (101 samples, 10.74%)</title><rect x="30.6383%" y="869" width="10.7447%" height="15" fill="rgb(240,125,3)" fg:x="288" fg:w="101"/><text x="30.8883%" y="879.50">0x120008034</text></g><g><title>libsystem_platform.dylib`_platform_strncmp (4 samples, 0.43%)</title><rect x="40.9574%" y="853" width="0.4255%" height="15" fill="rgb(205,98,50)" fg:x="385" fg:w="4"/><text x="41.2074%" y="863.50"></text></g><g><title>0x14004c2bc (111 samples, 11.81%)</title><rect x="29.6809%" y="885" width="11.8085%" height="15" fill="rgb(205,185,37)" fg:x="279" fg:w="111"/><text x="29.9309%" y="895.50">0x14004c2bc</text></g><g><title>0x120008038 (1 samples, 0.11%)</title><rect x="41.3830%" y="869" width="0.1064%" height="15" fill="rgb(238,207,15)" fg:x="389" fg:w="1"/><text x="41.6330%" y="879.50"></text></g><g><title>0x14004c2dc (5 samples, 0.53%)</title><rect x="41.4894%" y="885" width="0.5319%" height="15" fill="rgb(213,199,42)" fg:x="390" fg:w="5"/><text x="41.7394%" y="895.50"></text></g><g><title>0x14004c2f0 (3 samples, 0.32%)</title><rect x="42.0213%" y="885" width="0.3191%" height="15" fill="rgb(235,201,11)" fg:x="395" fg:w="3"/><text x="42.2713%" y="895.50"></text></g><g><title>0x14004c300 (1 samples, 0.11%)</title><rect x="42.3404%" y="885" width="0.1064%" height="15" fill="rgb(207,46,11)" fg:x="398" fg:w="1"/><text x="42.5904%" y="895.50"></text></g><g><title>0x14004c30c (6 samples, 0.64%)</title><rect x="42.4468%" y="885" width="0.6383%" height="15" fill="rgb(241,35,35)" fg:x="399" fg:w="6"/><text x="42.6968%" y="895.50"></text></g><g><title>0x14004c738 (2 samples, 0.21%)</title><rect x="43.0851%" y="885" width="0.2128%" height="15" fill="rgb(243,32,47)" fg:x="405" fg:w="2"/><text x="43.3351%" y="895.50"></text></g><g><title>0x14004c74c (3 samples, 0.32%)</title><rect x="43.2979%" y="885" width="0.3191%" height="15" fill="rgb(247,202,23)" fg:x="407" fg:w="3"/><text x="43.5479%" y="895.50"></text></g><g><title>0x14004c754 (2 samples, 0.21%)</title><rect x="43.6170%" y="885" width="0.2128%" height="15" fill="rgb(219,102,11)" fg:x="410" fg:w="2"/><text x="43.8670%" y="895.50"></text></g><g><title>0x14004c768 (3 samples, 0.32%)</title><rect x="43.8298%" y="885" width="0.3191%" height="15" fill="rgb(243,110,44)" fg:x="412" fg:w="3"/><text x="44.0798%" y="895.50"></text></g><g><title>0x14004c79c (4 samples, 0.43%)</title><rect x="44.1489%" y="885" width="0.4255%" height="15" fill="rgb(222,74,54)" fg:x="415" fg:w="4"/><text x="44.3989%" y="895.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (11 samples, 1.17%)</title><rect x="44.5745%" y="869" width="1.1702%" height="15" fill="rgb(216,99,12)" fg:x="419" fg:w="11"/><text x="44.8245%" y="879.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (6 samples, 0.64%)</title><rect x="45.7447%" y="869" width="0.6383%" height="15" fill="rgb(226,22,26)" fg:x="430" fg:w="6"/><text x="45.9947%" y="879.50"></text></g><g><title>0x14004c7a4 (68 samples, 7.23%)</title><rect x="44.5745%" y="885" width="7.2340%" height="15" fill="rgb(217,163,10)" fg:x="419" fg:w="68"/><text x="44.8245%" y="895.50">0x14004c7a4</text></g><g><title>deno`Builtins_LoadIC (51 samples, 5.43%)</title><rect x="46.3830%" y="869" width="5.4255%" height="15" fill="rgb(213,25,53)" fg:x="436" fg:w="51"/><text x="46.6330%" y="879.50">deno`Bu..</text></g><g><title>deno`Builtins_TypedArrayPrototypeByteLength (25 samples, 2.66%)</title><rect x="49.1489%" y="853" width="2.6596%" height="15" fill="rgb(252,105,26)" fg:x="462" fg:w="25"/><text x="49.3989%" y="863.50">de..</text></g><g><title>0x14004c7d8 (4 samples, 0.43%)</title><rect x="51.8085%" y="885" width="0.4255%" height="15" fill="rgb(220,39,43)" fg:x="487" fg:w="4"/><text x="52.0585%" y="895.50"></text></g><g><title>0x14004c7f0 (10 samples, 1.06%)</title><rect x="52.2340%" y="885" width="1.0638%" height="15" fill="rgb(229,68,48)" fg:x="491" fg:w="10"/><text x="52.4840%" y="895.50"></text></g><g><title>0x14004c808 (1 samples, 0.11%)</title><rect x="53.2979%" y="885" width="0.1064%" height="15" fill="rgb(252,8,32)" fg:x="501" fg:w="1"/><text x="53.5479%" y="895.50"></text></g><g><title>0x14004c818 (2 samples, 0.21%)</title><rect x="53.4043%" y="885" width="0.2128%" height="15" fill="rgb(223,20,43)" fg:x="502" fg:w="2"/><text x="53.6543%" y="895.50"></text></g><g><title>0x14004c864 (3 samples, 0.32%)</title><rect x="53.6170%" y="885" width="0.3191%" height="15" fill="rgb(229,81,49)" fg:x="504" fg:w="3"/><text x="53.8670%" y="895.50"></text></g><g><title>0x14004c878 (1 samples, 0.11%)</title><rect x="53.9362%" y="885" width="0.1064%" height="15" fill="rgb(236,28,36)" fg:x="507" fg:w="1"/><text x="54.1862%" y="895.50"></text></g><g><title>0x14004c880 (2 samples, 0.21%)</title><rect x="54.0426%" y="885" width="0.2128%" height="15" fill="rgb(249,185,26)" fg:x="508" fg:w="2"/><text x="54.2926%" y="895.50"></text></g><g><title>0x14004c88c (19 samples, 2.02%)</title><rect x="54.2553%" y="885" width="2.0213%" height="15" fill="rgb(249,174,33)" fg:x="510" fg:w="19"/><text x="54.5053%" y="895.50">0..</text></g><g><title>0x1088d6fd4 (6 samples, 0.64%)</title><rect x="56.2766%" y="869" width="0.6383%" height="15" fill="rgb(233,201,37)" fg:x="529" fg:w="6"/><text x="56.5266%" y="879.50"></text></g><g><title>0x12000802c (6 samples, 0.64%)</title><rect x="56.9149%" y="869" width="0.6383%" height="15" fill="rgb(221,78,26)" fg:x="535" fg:w="6"/><text x="57.1649%" y="879.50"></text></g><g><title>0x1088d6f30 (1 samples, 0.11%)</title><rect x="57.5532%" y="853" width="0.1064%" height="15" fill="rgb(250,127,30)" fg:x="541" fg:w="1"/><text x="57.8032%" y="863.50"></text></g><g><title>0x1088d6f34 (1 samples, 0.11%)</title><rect x="57.6596%" y="853" width="0.1064%" height="15" fill="rgb(230,49,44)" fg:x="542" fg:w="1"/><text x="57.9096%" y="863.50"></text></g><g><title>0x1088d6f6c (32 samples, 3.40%)</title><rect x="57.7660%" y="853" width="3.4043%" height="15" fill="rgb(229,67,23)" fg:x="543" fg:w="32"/><text x="58.0160%" y="863.50">0x1..</text></g><g><title>0x1088d7128 (4 samples, 0.43%)</title><rect x="61.1702%" y="837" width="0.4255%" height="15" fill="rgb(249,83,47)" fg:x="575" fg:w="4"/><text x="61.4202%" y="847.50"></text></g><g><title>0x1088d71ac (3 samples, 0.32%)</title><rect x="61.5957%" y="837" width="0.3191%" height="15" fill="rgb(215,43,3)" fg:x="579" fg:w="3"/><text x="61.8457%" y="847.50"></text></g><g><title>0x1088d71e4 (8 samples, 0.85%)</title><rect x="61.9149%" y="837" width="0.8511%" height="15" fill="rgb(238,154,13)" fg:x="582" fg:w="8"/><text x="62.1649%" y="847.50"></text></g><g><title>0x1088d7200 (7 samples, 0.74%)</title><rect x="62.7660%" y="837" width="0.7447%" height="15" fill="rgb(219,56,2)" fg:x="590" fg:w="7"/><text x="63.0160%" y="847.50"></text></g><g><title>0x1088d720c (8 samples, 0.85%)</title><rect x="63.5106%" y="837" width="0.8511%" height="15" fill="rgb(233,0,4)" fg:x="597" fg:w="8"/><text x="63.7606%" y="847.50"></text></g><g><title>0x1088d7214 (16 samples, 1.70%)</title><rect x="64.3617%" y="837" width="1.7021%" height="15" fill="rgb(235,30,7)" fg:x="605" fg:w="16"/><text x="64.6117%" y="847.50"></text></g><g><title>0x1088d7238 (4 samples, 0.43%)</title><rect x="66.0638%" y="837" width="0.4255%" height="15" fill="rgb(250,79,13)" fg:x="621" fg:w="4"/><text x="66.3138%" y="847.50"></text></g><g><title>0x1088d7280 (3 samples, 0.32%)</title><rect x="66.4894%" y="837" width="0.3191%" height="15" fill="rgb(211,146,34)" fg:x="625" fg:w="3"/><text x="66.7394%" y="847.50"></text></g><g><title>0x1088d7284 (5 samples, 0.53%)</title><rect x="66.8085%" y="837" width="0.5319%" height="15" fill="rgb(228,22,38)" fg:x="628" fg:w="5"/><text x="67.0585%" y="847.50"></text></g><g><title>0x1088d7294 (12 samples, 1.28%)</title><rect x="67.3404%" y="837" width="1.2766%" height="15" fill="rgb(235,168,5)" fg:x="633" fg:w="12"/><text x="67.5904%" y="847.50"></text></g><g><title>0x1088d72dc (7 samples, 0.74%)</title><rect x="68.6170%" y="837" width="0.7447%" height="15" fill="rgb(221,155,16)" fg:x="645" fg:w="7"/><text x="68.8670%" y="847.50"></text></g><g><title>0x1088d72f8 (6 samples, 0.64%)</title><rect x="69.3617%" y="837" width="0.6383%" height="15" fill="rgb(215,215,53)" fg:x="652" fg:w="6"/><text x="69.6117%" y="847.50"></text></g><g><title>0x1088d7308 (6 samples, 0.64%)</title><rect x="70.0000%" y="837" width="0.6383%" height="15" fill="rgb(223,4,10)" fg:x="658" fg:w="6"/><text x="70.2500%" y="847.50"></text></g><g><title>0x1088d731c (11 samples, 1.17%)</title><rect x="70.6383%" y="837" width="1.1702%" height="15" fill="rgb(234,103,6)" fg:x="664" fg:w="11"/><text x="70.8883%" y="847.50"></text></g><g><title>0x1088d7338 (6 samples, 0.64%)</title><rect x="71.8085%" y="837" width="0.6383%" height="15" fill="rgb(227,97,0)" fg:x="675" fg:w="6"/><text x="72.0585%" y="847.50"></text></g><g><title>0x1088d7350 (2 samples, 0.21%)</title><rect x="72.4468%" y="837" width="0.2128%" height="15" fill="rgb(234,150,53)" fg:x="681" fg:w="2"/><text x="72.6968%" y="847.50"></text></g><g><title>0x1088d7358 (5 samples, 0.53%)</title><rect x="72.6596%" y="837" width="0.5319%" height="15" fill="rgb(228,201,54)" fg:x="683" fg:w="5"/><text x="72.9096%" y="847.50"></text></g><g><title>0x1088d7370 (4 samples, 0.43%)</title><rect x="73.1915%" y="837" width="0.4255%" height="15" fill="rgb(222,22,37)" fg:x="688" fg:w="4"/><text x="73.4415%" y="847.50"></text></g><g><title>0x1088d7384 (4 samples, 0.43%)</title><rect x="73.6170%" y="837" width="0.4255%" height="15" fill="rgb(237,53,32)" fg:x="692" fg:w="4"/><text x="73.8670%" y="847.50"></text></g><g><title>0x1088d73b0 (10 samples, 1.06%)</title><rect x="74.0426%" y="837" width="1.0638%" height="15" fill="rgb(233,25,53)" fg:x="696" fg:w="10"/><text x="74.2926%" y="847.50"></text></g><g><title>0x1088d77b8 (4 samples, 0.43%)</title><rect x="75.4255%" y="821" width="0.4255%" height="15" fill="rgb(210,40,34)" fg:x="709" fg:w="4"/><text x="75.6755%" y="831.50"></text></g><g><title>0x1088d77c0 (3 samples, 0.32%)</title><rect x="75.8511%" y="821" width="0.3191%" height="15" fill="rgb(241,220,44)" fg:x="713" fg:w="3"/><text x="76.1011%" y="831.50"></text></g><g><title>0x1088d77c4 (9 samples, 0.96%)</title><rect x="76.1702%" y="821" width="0.9574%" height="15" fill="rgb(235,28,35)" fg:x="716" fg:w="9"/><text x="76.4202%" y="831.50"></text></g><g><title>0x1088d73c0 (21 samples, 2.23%)</title><rect x="75.1064%" y="837" width="2.2340%" height="15" fill="rgb(210,56,17)" fg:x="706" fg:w="21"/><text x="75.3564%" y="847.50">0..</text></g><g><title>0x1088d7900 (2 samples, 0.21%)</title><rect x="77.1277%" y="821" width="0.2128%" height="15" fill="rgb(224,130,29)" fg:x="725" fg:w="2"/><text x="77.3777%" y="831.50"></text></g><g><title>0x1088d73cc (2 samples, 0.21%)</title><rect x="77.3404%" y="837" width="0.2128%" height="15" fill="rgb(235,212,8)" fg:x="727" fg:w="2"/><text x="77.5904%" y="847.50"></text></g><g><title>0x1088d6f74 (158 samples, 16.81%)</title><rect x="61.1702%" y="853" width="16.8085%" height="15" fill="rgb(223,33,50)" fg:x="575" fg:w="158"/><text x="61.4202%" y="863.50">0x1088d6f74</text></g><g><title>0x1088d7930 (4 samples, 0.43%)</title><rect x="77.5532%" y="837" width="0.4255%" height="15" fill="rgb(219,149,13)" fg:x="729" fg:w="4"/><text x="77.8032%" y="847.50"></text></g><g><title>0x1088d6f84 (7 samples, 0.74%)</title><rect x="77.9787%" y="853" width="0.7447%" height="15" fill="rgb(250,156,29)" fg:x="733" fg:w="7"/><text x="78.2287%" y="863.50"></text></g><g><title>0x1088d6f94 (10 samples, 1.06%)</title><rect x="78.7234%" y="853" width="1.0638%" height="15" fill="rgb(216,193,19)" fg:x="740" fg:w="10"/><text x="78.9734%" y="863.50"></text></g><g><title>0x1088d6fac (1 samples, 0.11%)</title><rect x="79.7872%" y="853" width="0.1064%" height="15" fill="rgb(216,135,14)" fg:x="750" fg:w="1"/><text x="80.0372%" y="863.50"></text></g><g><title>0x1088d7e28 (7 samples, 0.74%)</title><rect x="79.8936%" y="853" width="0.7447%" height="15" fill="rgb(241,47,5)" fg:x="751" fg:w="7"/><text x="80.1436%" y="863.50"></text></g><g><title>0x120008034 (242 samples, 25.74%)</title><rect x="57.5532%" y="869" width="25.7447%" height="15" fill="rgb(233,42,35)" fg:x="541" fg:w="242"/><text x="57.8032%" y="879.50">0x120008034</text></g><g><title>libsystem_platform.dylib`_platform_strncmp (25 samples, 2.66%)</title><rect x="80.6383%" y="853" width="2.6596%" height="15" fill="rgb(231,13,6)" fg:x="758" fg:w="25"/><text x="80.8883%" y="863.50">li..</text></g><g><title>0x120008038 (10 samples, 1.06%)</title><rect x="83.2979%" y="869" width="1.0638%" height="15" fill="rgb(207,181,40)" fg:x="783" fg:w="10"/><text x="83.5479%" y="879.50"></text></g><g><title>0x14004c894 (270 samples, 28.72%)</title><rect x="56.2766%" y="885" width="28.7234%" height="15" fill="rgb(254,173,49)" fg:x="529" fg:w="270"/><text x="56.5266%" y="895.50">0x14004c894</text></g><g><title>0x120008064 (6 samples, 0.64%)</title><rect x="84.3617%" y="869" width="0.6383%" height="15" fill="rgb(221,1,38)" fg:x="793" fg:w="6"/><text x="84.6117%" y="879.50"></text></g><g><title>0x14004c8b4 (6 samples, 0.64%)</title><rect x="85.0000%" y="885" width="0.6383%" height="15" fill="rgb(206,124,46)" fg:x="799" fg:w="6"/><text x="85.2500%" y="895.50"></text></g><g><title>0x14004c8bc (1 samples, 0.11%)</title><rect x="85.6383%" y="885" width="0.1064%" height="15" fill="rgb(249,21,11)" fg:x="805" fg:w="1"/><text x="85.8883%" y="895.50"></text></g><g><title>0x14004c8c8 (5 samples, 0.53%)</title><rect x="85.7447%" y="885" width="0.5319%" height="15" fill="rgb(222,201,40)" fg:x="806" fg:w="5"/><text x="85.9947%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.21%)</title><rect x="86.2766%" y="885" width="0.2128%" height="15" fill="rgb(235,61,29)" fg:x="811" fg:w="2"/><text x="86.5266%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.21%)</title><rect x="86.2766%" y="869" width="0.2128%" height="15" fill="rgb(219,207,3)" fg:x="811" fg:w="2"/><text x="86.5266%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="86.3830%" y="853" width="0.1064%" height="15" fill="rgb(222,56,46)" fg:x="812" fg:w="1"/><text x="86.6330%" y="863.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.11%)</title><rect x="86.3830%" y="837" width="0.1064%" height="15" fill="rgb(239,76,54)" fg:x="812" fg:w="1"/><text x="86.6330%" y="847.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.11%)</title><rect x="86.3830%" y="821" width="0.1064%" height="15" fill="rgb(231,124,27)" fg:x="812" fg:w="1"/><text x="86.6330%" y="831.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.11%)</title><rect x="86.3830%" y="805" width="0.1064%" height="15" fill="rgb(249,195,6)" fg:x="812" fg:w="1"/><text x="86.6330%" y="815.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.11%)</title><rect x="86.3830%" y="789" width="0.1064%" height="15" fill="rgb(237,174,47)" fg:x="812" fg:w="1"/><text x="86.6330%" y="799.50"></text></g><g><title>deno`ffi_call_int (1 samples, 0.11%)</title><rect x="86.3830%" y="773" width="0.1064%" height="15" fill="rgb(206,201,31)" fg:x="812" fg:w="1"/><text x="86.6330%" y="783.50"></text></g><g><title>deno`ffi_call_SYSV (1 samples, 0.11%)</title><rect x="86.3830%" y="757" width="0.1064%" height="15" fill="rgb(231,57,52)" fg:x="812" fg:w="1"/><text x="86.6330%" y="767.50"></text></g><g><title>0x1088d6f6c (1 samples, 0.11%)</title><rect x="86.3830%" y="741" width="0.1064%" height="15" fill="rgb(248,177,22)" fg:x="812" fg:w="1"/><text x="86.6330%" y="751.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (920 samples, 97.87%)</title><rect x="0.2128%" y="1013" width="97.8723%" height="15" fill="rgb(215,211,37)" fg:x="2" fg:w="920"/><text x="0.4628%" y="1023.50">deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (920 samples, 97.87%)</title><rect x="0.2128%" y="997" width="97.8723%" height="15" fill="rgb(241,128,51)" fg:x="2" fg:w="920"/><text x="0.4628%" y="1007.50">deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::inte..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (920 samples, 97.87%)</title><rect x="0.2128%" y="981" width="97.8723%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="920"/><text x="0.4628%" y="991.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (920 samples, 97.87%)</title><rect x="0.2128%" y="965" width="97.8723%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="920"/><text x="0.4628%" y="975.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSEntry (920 samples, 97.87%)</title><rect x="0.2128%" y="949" width="97.8723%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="920"/><text x="0.4628%" y="959.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (920 samples, 97.87%)</title><rect x="0.2128%" y="933" width="97.8723%" height="15" fill="rgb(249,149,8)" fg:x="2" fg:w="920"/><text x="0.4628%" y="943.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (920 samples, 97.87%)</title><rect x="0.2128%" y="917" width="97.8723%" height="15" fill="rgb(243,35,44)" fg:x="2" fg:w="920"/><text x="0.4628%" y="927.50">deno`Builtins_GeneratorPrototypeNext</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (920 samples, 97.87%)</title><rect x="0.2128%" y="901" width="97.8723%" height="15" fill="rgb(246,89,9)" fg:x="2" fg:w="920"/><text x="0.4628%" y="911.50">deno`Builtins_InterpreterEntryTrampoline</text></g><g><title>deno`Builtins_LoadIC (109 samples, 11.60%)</title><rect x="86.4894%" y="885" width="11.5957%" height="15" fill="rgb(233,213,13)" fg:x="813" fg:w="109"/><text x="86.7394%" y="895.50">deno`Builtins_Loa..</text></g><g><title>deno`tcc_compile (1 samples, 0.11%)</title><rect x="98.0851%" y="725" width="0.1064%" height="15" fill="rgb(233,141,41)" fg:x="922" fg:w="1"/><text x="98.3351%" y="735.50"></text></g><g><title>deno`preprocess_start (1 samples, 0.11%)</title><rect x="98.0851%" y="709" width="0.1064%" height="15" fill="rgb(239,167,4)" fg:x="922" fg:w="1"/><text x="98.3351%" y="719.50"></text></g><g><title>deno`tccpp_new (1 samples, 0.11%)</title><rect x="98.0851%" y="693" width="0.1064%" height="15" fill="rgb(209,217,16)" fg:x="922" fg:w="1"/><text x="98.3351%" y="703.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (924 samples, 98.30%)</title><rect x="0.0000%" y="1141" width="98.2979%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="924"/><text x="0.2500%" y="1151.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (924 samples, 98.30%)</title><rect x="0.0000%" y="1125" width="98.2979%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="924"/><text x="0.2500%" y="1135.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (924 samples, 98.30%)</title><rect x="0.0000%" y="1109" width="98.2979%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="924"/><text x="0.2500%" y="1119.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (922 samples, 98.09%)</title><rect x="0.2128%" y="1093" width="98.0851%" height="15" fill="rgb(252,106,19)" fg:x="2" fg:w="922"/><text x="0.4628%" y="1103.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (922 samples, 98.09%)</title><rect x="0.2128%" y="1077" width="98.0851%" height="15" fill="rgb(206,74,20)" fg:x="2" fg:w="922"/><text x="0.4628%" y="1087.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (922 samples, 98.09%)</title><rect x="0.2128%" y="1061" width="98.0851%" height="15" fill="rgb(230,138,44)" fg:x="2" fg:w="922"/><text x="0.4628%" y="1071.50">deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (922 samples, 98.09%)</title><rect x="0.2128%" y="1045" width="98.0851%" height="15" fill="rgb(235,182,43)" fg:x="2" fg:w="922"/><text x="0.4628%" y="1055.50">deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (922 samples, 98.09%)</title><rect x="0.2128%" y="1029" width="98.0851%" height="15" fill="rgb(242,16,51)" fg:x="2" fg:w="922"/><text x="0.4628%" y="1039.50">deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardLi..</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (2 samples, 0.21%)</title><rect x="98.0851%" y="1013" width="0.2128%" height="15" fill="rgb(248,9,4)" fg:x="922" fg:w="2"/><text x="98.3351%" y="1023.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.21%)</title><rect x="98.0851%" y="997" width="0.2128%" height="15" fill="rgb(210,31,22)" fg:x="922" fg:w="2"/><text x="98.3351%" y="1007.50"></text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (2 samples, 0.21%)</title><rect x="98.0851%" y="981" width="0.2128%" height="15" fill="rgb(239,54,39)" fg:x="922" fg:w="2"/><text x="98.3351%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (2 samples, 0.21%)</title><rect x="98.0851%" y="965" width="0.2128%" height="15" fill="rgb(230,99,41)" fg:x="922" fg:w="2"/><text x="98.3351%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.21%)</title><rect x="98.0851%" y="949" width="0.2128%" height="15" fill="rgb(253,106,12)" fg:x="922" fg:w="2"/><text x="98.3351%" y="959.50"></text></g><g><title>deno`Builtins_JSEntry (2 samples, 0.21%)</title><rect x="98.0851%" y="933" width="0.2128%" height="15" fill="rgb(213,46,41)" fg:x="922" fg:w="2"/><text x="98.3351%" y="943.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (2 samples, 0.21%)</title><rect x="98.0851%" y="917" width="0.2128%" height="15" fill="rgb(215,133,35)" fg:x="922" fg:w="2"/><text x="98.3351%" y="927.50"></text></g><g><title>deno`Builtins_GeneratorPrototypeNext (2 samples, 0.21%)</title><rect x="98.0851%" y="901" width="0.2128%" height="15" fill="rgb(213,28,5)" fg:x="922" fg:w="2"/><text x="98.3351%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.21%)</title><rect x="98.0851%" y="885" width="0.2128%" height="15" fill="rgb(215,77,49)" fg:x="922" fg:w="2"/><text x="98.3351%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.21%)</title><rect x="98.0851%" y="869" width="0.2128%" height="15" fill="rgb(248,100,22)" fg:x="922" fg:w="2"/><text x="98.3351%" y="879.50"></text></g><g><title>deno`Builtins_ConstructHandler (2 samples, 0.21%)</title><rect x="98.0851%" y="853" width="0.2128%" height="15" fill="rgb(208,67,9)" fg:x="922" fg:w="2"/><text x="98.3351%" y="863.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (2 samples, 0.21%)</title><rect x="98.0851%" y="837" width="0.2128%" height="15" fill="rgb(219,133,21)" fg:x="922" fg:w="2"/><text x="98.3351%" y="847.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.21%)</title><rect x="98.0851%" y="821" width="0.2128%" height="15" fill="rgb(246,46,29)" fg:x="922" fg:w="2"/><text x="98.3351%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.21%)</title><rect x="98.0851%" y="805" width="0.2128%" height="15" fill="rgb(246,185,52)" fg:x="922" fg:w="2"/><text x="98.3351%" y="815.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2 samples, 0.21%)</title><rect x="98.0851%" y="789" width="0.2128%" height="15" fill="rgb(252,136,11)" fg:x="922" fg:w="2"/><text x="98.3351%" y="799.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.21%)</title><rect x="98.0851%" y="773" width="0.2128%" height="15" fill="rgb(219,138,53)" fg:x="922" fg:w="2"/><text x="98.3351%" y="783.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.21%)</title><rect x="98.0851%" y="757" width="0.2128%" height="15" fill="rgb(211,51,23)" fg:x="922" fg:w="2"/><text x="98.3351%" y="767.50"></text></g><g><title>deno`deno_ffi::op_ffi_load::v8_func (2 samples, 0.21%)</title><rect x="98.0851%" y="741" width="0.2128%" height="15" fill="rgb(247,221,28)" fg:x="922" fg:w="2"/><text x="98.3351%" y="751.50"></text></g><g><title>deno`tcc_set_output_type (1 samples, 0.11%)</title><rect x="98.1915%" y="725" width="0.1064%" height="15" fill="rgb(251,222,45)" fg:x="923" fg:w="1"/><text x="98.4415%" y="735.50"></text></g><g><title>deno`tcc_add_macos_sdkpath (1 samples, 0.11%)</title><rect x="98.1915%" y="709" width="0.1064%" height="15" fill="rgb(217,162,53)" fg:x="923" fg:w="1"/><text x="98.4415%" y="719.50"></text></g><g><title>dyld`dyld4::APIs::dlopen_from (1 samples, 0.11%)</title><rect x="98.1915%" y="693" width="0.1064%" height="15" fill="rgb(229,93,14)" fg:x="923" fg:w="1"/><text x="98.4415%" y="703.50"></text></g><g><title>dyld`dyld4::RuntimeState::withLoadersWriteLock(void  (1 samples, 0.11%)</title><rect x="98.1915%" y="677" width="0.1064%" height="15" fill="rgb(209,67,49)" fg:x="923" fg:w="1"/><text x="98.4415%" y="687.50"></text></g><g><title>dyld`invocation function for block in dyld4::APIs::dlopen_from (1 samples, 0.11%)</title><rect x="98.1915%" y="661" width="0.1064%" height="15" fill="rgb(213,87,29)" fg:x="923" fg:w="1"/><text x="98.4415%" y="671.50"></text></g><g><title>dyld`dyld4::Loader::getLoader (1 samples, 0.11%)</title><rect x="98.1915%" y="645" width="0.1064%" height="15" fill="rgb(205,151,52)" fg:x="923" fg:w="1"/><text x="98.4415%" y="655.50"></text></g><g><title>dyld`dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="629" width="0.1064%" height="15" fill="rgb(253,215,39)" fg:x="923" fg:w="1"/><text x="98.4415%" y="639.50"></text></g><g><title>dyld`dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&amp;, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="613" width="0.1064%" height="15" fill="rgb(221,220,41)" fg:x="923" fg:w="1"/><text x="98.4415%" y="623.50"></text></g><g><title>dyld`dyld4::ProcessConfig::PathOverrides::forEachDylibFallback(dyld3::Platform, bool, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="597" width="0.1064%" height="15" fill="rgb(218,133,21)" fg:x="923" fg:w="1"/><text x="98.4415%" y="607.50"></text></g><g><title>dyld`invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&amp;, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="581" width="0.1064%" height="15" fill="rgb(221,193,43)" fg:x="923" fg:w="1"/><text x="98.4415%" y="591.50"></text></g><g><title>dyld`invocation function for block in dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="565" width="0.1064%" height="15" fill="rgb(240,128,52)" fg:x="923" fg:w="1"/><text x="98.4415%" y="575.50"></text></g><g><title>dyld`dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void  (1 samples, 0.11%)</title><rect x="98.1915%" y="549" width="0.1064%" height="15" fill="rgb(253,114,12)" fg:x="923" fg:w="1"/><text x="98.4415%" y="559.50"></text></g><g><title>dyld`invocation function for block in dyld4::Loader::getLoader (1 samples, 0.11%)</title><rect x="98.1915%" y="533" width="0.1064%" height="15" fill="rgb(215,223,47)" fg:x="923" fg:w="1"/><text x="98.4415%" y="543.50"></text></g><g><title>dyld`dyld4::Loader::makeDyldCacheLoader (1 samples, 0.11%)</title><rect x="98.1915%" y="517" width="0.1064%" height="15" fill="rgb(248,225,23)" fg:x="923" fg:w="1"/><text x="98.4415%" y="527.50"></text></g><g><title>dyld`dyld4::RuntimeState::findPrebuiltLoader (1 samples, 0.11%)</title><rect x="98.1915%" y="501" width="0.1064%" height="15" fill="rgb(250,108,0)" fg:x="923" fg:w="1"/><text x="98.4415%" y="511.50"></text></g><g><title>dyld`dyld4::PrebuiltLoader::isValid (1 samples, 0.11%)</title><rect x="98.1915%" y="485" width="0.1064%" height="15" fill="rgb(228,208,7)" fg:x="923" fg:w="1"/><text x="98.4415%" y="495.50"></text></g><g><title>deno`v8::internal::Genesis::InitializeExperimentalGlobal (1 samples, 0.11%)</title><rect x="98.2979%" y="1045" width="0.1064%" height="15" fill="rgb(244,45,10)" fg:x="924" fg:w="1"/><text x="98.5479%" y="1055.50"></text></g><g><title>deno`v8::internal::SimpleInstallFunction(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.2979%" y="1029" width="0.1064%" height="15" fill="rgb(207,125,25)" fg:x="924" fg:w="1"/><text x="98.5479%" y="1039.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::SimpleCreateFunction(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.2979%" y="1013" width="0.1064%" height="15" fill="rgb(210,195,18)" fg:x="924" fg:w="1"/><text x="98.5479%" y="1023.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CreateFunctionForBuiltinWithoutPrototype(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.2979%" y="997" width="0.1064%" height="15" fill="rgb(249,80,12)" fg:x="924" fg:w="1"/><text x="98.5479%" y="1007.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewSharedFunctionInfo(v8::internal::MaybeHandle&lt;v8::internal::String&gt;, v8::internal::MaybeHandle (1 samples, 0.11%)</title><rect x="98.2979%" y="981" width="0.1064%" height="15" fill="rgb(221,65,9)" fg:x="924" fg:w="1"/><text x="98.5479%" y="991.50"></text></g><g><title>deno`v8::internal::SharedFunctionInfo::set_kind (1 samples, 0.11%)</title><rect x="98.2979%" y="965" width="0.1064%" height="15" fill="rgb(235,49,36)" fg:x="924" fg:w="1"/><text x="98.5479%" y="975.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.21%)</title><rect x="98.2979%" y="1109" width="0.2128%" height="15" fill="rgb(225,32,20)" fg:x="924" fg:w="2"/><text x="98.5479%" y="1119.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.21%)</title><rect x="98.2979%" y="1093" width="0.2128%" height="15" fill="rgb(215,141,46)" fg:x="924" fg:w="2"/><text x="98.5479%" y="1103.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.21%)</title><rect x="98.2979%" y="1077" width="0.2128%" height="15" fill="rgb(250,160,47)" fg:x="924" fg:w="2"/><text x="98.5479%" y="1087.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.21%)</title><rect x="98.2979%" y="1061" width="0.2128%" height="15" fill="rgb(216,222,40)" fg:x="924" fg:w="2"/><text x="98.5479%" y="1071.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.4043%" y="1045" width="0.1064%" height="15" fill="rgb(234,217,39)" fg:x="925" fg:w="1"/><text x="98.6543%" y="1055.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.4043%" y="1029" width="0.1064%" height="15" fill="rgb(207,178,40)" fg:x="925" fg:w="1"/><text x="98.6543%" y="1039.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.4043%" y="1013" width="0.1064%" height="15" fill="rgb(221,136,13)" fg:x="925" fg:w="1"/><text x="98.6543%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="997" width="0.1064%" height="15" fill="rgb(249,199,10)" fg:x="925" fg:w="1"/><text x="98.6543%" y="1007.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.11%)</title><rect x="98.4043%" y="981" width="0.1064%" height="15" fill="rgb(249,222,13)" fg:x="925" fg:w="1"/><text x="98.6543%" y="991.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="965" width="0.1064%" height="15" fill="rgb(244,185,38)" fg:x="925" fg:w="1"/><text x="98.6543%" y="975.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="949" width="0.1064%" height="15" fill="rgb(236,202,9)" fg:x="925" fg:w="1"/><text x="98.6543%" y="959.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="933" width="0.1064%" height="15" fill="rgb(250,229,37)" fg:x="925" fg:w="1"/><text x="98.6543%" y="943.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.11%)</title><rect x="98.4043%" y="917" width="0.1064%" height="15" fill="rgb(206,174,23)" fg:x="925" fg:w="1"/><text x="98.6543%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="901" width="0.1064%" height="15" fill="rgb(211,33,43)" fg:x="925" fg:w="1"/><text x="98.6543%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="885" width="0.1064%" height="15" fill="rgb(245,58,50)" fg:x="925" fg:w="1"/><text x="98.6543%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="869" width="0.1064%" height="15" fill="rgb(244,68,36)" fg:x="925" fg:w="1"/><text x="98.6543%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.11%)</title><rect x="98.4043%" y="853" width="0.1064%" height="15" fill="rgb(232,229,15)" fg:x="925" fg:w="1"/><text x="98.6543%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="837" width="0.1064%" height="15" fill="rgb(254,30,23)" fg:x="925" fg:w="1"/><text x="98.6543%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="821" width="0.1064%" height="15" fill="rgb(235,160,14)" fg:x="925" fg:w="1"/><text x="98.6543%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="805" width="0.1064%" height="15" fill="rgb(212,155,44)" fg:x="925" fg:w="1"/><text x="98.6543%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.11%)</title><rect x="98.4043%" y="789" width="0.1064%" height="15" fill="rgb(226,2,50)" fg:x="925" fg:w="1"/><text x="98.6543%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="773" width="0.1064%" height="15" fill="rgb(234,177,6)" fg:x="925" fg:w="1"/><text x="98.6543%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="757" width="0.1064%" height="15" fill="rgb(217,24,9)" fg:x="925" fg:w="1"/><text x="98.6543%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="741" width="0.1064%" height="15" fill="rgb(220,13,46)" fg:x="925" fg:w="1"/><text x="98.6543%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="725" width="0.1064%" height="15" fill="rgb(239,221,27)" fg:x="925" fg:w="1"/><text x="98.6543%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="709" width="0.1064%" height="15" fill="rgb(222,198,25)" fg:x="925" fg:w="1"/><text x="98.6543%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="693" width="0.1064%" height="15" fill="rgb(211,99,13)" fg:x="925" fg:w="1"/><text x="98.6543%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="677" width="0.1064%" height="15" fill="rgb(232,111,31)" fg:x="925" fg:w="1"/><text x="98.6543%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="661" width="0.1064%" height="15" fill="rgb(245,82,37)" fg:x="925" fg:w="1"/><text x="98.6543%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="645" width="0.1064%" height="15" fill="rgb(227,149,46)" fg:x="925" fg:w="1"/><text x="98.6543%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="629" width="0.1064%" height="15" fill="rgb(218,36,50)" fg:x="925" fg:w="1"/><text x="98.6543%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="613" width="0.1064%" height="15" fill="rgb(226,80,48)" fg:x="925" fg:w="1"/><text x="98.6543%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="597" width="0.1064%" height="15" fill="rgb(238,224,15)" fg:x="925" fg:w="1"/><text x="98.6543%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="581" width="0.1064%" height="15" fill="rgb(241,136,10)" fg:x="925" fg:w="1"/><text x="98.6543%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="565" width="0.1064%" height="15" fill="rgb(208,32,45)" fg:x="925" fg:w="1"/><text x="98.6543%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="549" width="0.1064%" height="15" fill="rgb(207,135,9)" fg:x="925" fg:w="1"/><text x="98.6543%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="533" width="0.1064%" height="15" fill="rgb(206,86,44)" fg:x="925" fg:w="1"/><text x="98.6543%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="517" width="0.1064%" height="15" fill="rgb(245,177,15)" fg:x="925" fg:w="1"/><text x="98.6543%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="501" width="0.1064%" height="15" fill="rgb(206,64,50)" fg:x="925" fg:w="1"/><text x="98.6543%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="485" width="0.1064%" height="15" fill="rgb(234,36,40)" fg:x="925" fg:w="1"/><text x="98.6543%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="469" width="0.1064%" height="15" fill="rgb(213,64,8)" fg:x="925" fg:w="1"/><text x="98.6543%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="453" width="0.1064%" height="15" fill="rgb(210,75,36)" fg:x="925" fg:w="1"/><text x="98.6543%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="437" width="0.1064%" height="15" fill="rgb(229,88,21)" fg:x="925" fg:w="1"/><text x="98.6543%" y="447.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="421" width="0.1064%" height="15" fill="rgb(252,204,47)" fg:x="925" fg:w="1"/><text x="98.6543%" y="431.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="405" width="0.1064%" height="15" fill="rgb(208,77,27)" fg:x="925" fg:w="1"/><text x="98.6543%" y="415.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="389" width="0.1064%" height="15" fill="rgb(221,76,26)" fg:x="925" fg:w="1"/><text x="98.6543%" y="399.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="373" width="0.1064%" height="15" fill="rgb(225,139,18)" fg:x="925" fg:w="1"/><text x="98.6543%" y="383.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="357" width="0.1064%" height="15" fill="rgb(230,137,11)" fg:x="925" fg:w="1"/><text x="98.6543%" y="367.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="341" width="0.1064%" height="15" fill="rgb(212,28,1)" fg:x="925" fg:w="1"/><text x="98.6543%" y="351.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="325" width="0.1064%" height="15" fill="rgb(248,164,17)" fg:x="925" fg:w="1"/><text x="98.6543%" y="335.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="309" width="0.1064%" height="15" fill="rgb(222,171,42)" fg:x="925" fg:w="1"/><text x="98.6543%" y="319.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="293" width="0.1064%" height="15" fill="rgb(243,84,45)" fg:x="925" fg:w="1"/><text x="98.6543%" y="303.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="277" width="0.1064%" height="15" fill="rgb(252,49,23)" fg:x="925" fg:w="1"/><text x="98.6543%" y="287.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="261" width="0.1064%" height="15" fill="rgb(215,19,7)" fg:x="925" fg:w="1"/><text x="98.6543%" y="271.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="245" width="0.1064%" height="15" fill="rgb(238,81,41)" fg:x="925" fg:w="1"/><text x="98.6543%" y="255.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="229" width="0.1064%" height="15" fill="rgb(210,199,37)" fg:x="925" fg:w="1"/><text x="98.6543%" y="239.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="213" width="0.1064%" height="15" fill="rgb(244,192,49)" fg:x="925" fg:w="1"/><text x="98.6543%" y="223.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="197" width="0.1064%" height="15" fill="rgb(226,211,11)" fg:x="925" fg:w="1"/><text x="98.6543%" y="207.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="181" width="0.1064%" height="15" fill="rgb(236,162,54)" fg:x="925" fg:w="1"/><text x="98.6543%" y="191.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="165" width="0.1064%" height="15" fill="rgb(220,229,9)" fg:x="925" fg:w="1"/><text x="98.6543%" y="175.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="149" width="0.1064%" height="15" fill="rgb(250,87,22)" fg:x="925" fg:w="1"/><text x="98.6543%" y="159.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="133" width="0.1064%" height="15" fill="rgb(239,43,17)" fg:x="925" fg:w="1"/><text x="98.6543%" y="143.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="117" width="0.1064%" height="15" fill="rgb(231,177,25)" fg:x="925" fg:w="1"/><text x="98.6543%" y="127.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="101" width="0.1064%" height="15" fill="rgb(219,179,1)" fg:x="925" fg:w="1"/><text x="98.6543%" y="111.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.11%)</title><rect x="98.4043%" y="85" width="0.1064%" height="15" fill="rgb(238,219,53)" fg:x="925" fg:w="1"/><text x="98.6543%" y="95.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.4043%" y="69" width="0.1064%" height="15" fill="rgb(232,167,36)" fg:x="925" fg:w="1"/><text x="98.6543%" y="79.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="53" width="0.1064%" height="15" fill="rgb(244,19,51)" fg:x="925" fg:w="1"/><text x="98.6543%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.4043%" y="37" width="0.1064%" height="15" fill="rgb(224,6,22)" fg:x="925" fg:w="1"/><text x="98.6543%" y="47.50"></text></g><g><title>deno`v8::internal::Heap::SetUpSpaces (1 samples, 0.11%)</title><rect x="98.5106%" y="1029" width="0.1064%" height="15" fill="rgb(224,145,5)" fg:x="926" fg:w="1"/><text x="98.7606%" y="1039.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::SemiSpaceNewSpace (1 samples, 0.11%)</title><rect x="98.5106%" y="1013" width="0.1064%" height="15" fill="rgb(234,130,49)" fg:x="926" fg:w="1"/><text x="98.7606%" y="1023.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (1 samples, 0.11%)</title><rect x="98.5106%" y="997" width="0.1064%" height="15" fill="rgb(254,6,2)" fg:x="926" fg:w="1"/><text x="98.7606%" y="1007.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.11%)</title><rect x="98.5106%" y="981" width="0.1064%" height="15" fill="rgb(208,96,46)" fg:x="926" fg:w="1"/><text x="98.7606%" y="991.50"></text></g><g><title>deno`v8::internal::Page::Page (1 samples, 0.11%)</title><rect x="98.5106%" y="965" width="0.1064%" height="15" fill="rgb(239,3,39)" fg:x="926" fg:w="1"/><text x="98.7606%" y="975.50"></text></g><g><title>deno`heap::base::ActiveSystemPages::Init (1 samples, 0.11%)</title><rect x="98.5106%" y="949" width="0.1064%" height="15" fill="rgb(233,210,1)" fg:x="926" fg:w="1"/><text x="98.7606%" y="959.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.43%)</title><rect x="98.2979%" y="1125" width="0.4255%" height="15" fill="rgb(244,137,37)" fg:x="924" fg:w="4"/><text x="98.5479%" y="1135.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.21%)</title><rect x="98.5106%" y="1109" width="0.2128%" height="15" fill="rgb(240,136,2)" fg:x="926" fg:w="2"/><text x="98.7606%" y="1119.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.21%)</title><rect x="98.5106%" y="1093" width="0.2128%" height="15" fill="rgb(239,18,37)" fg:x="926" fg:w="2"/><text x="98.7606%" y="1103.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.21%)</title><rect x="98.5106%" y="1077" width="0.2128%" height="15" fill="rgb(218,185,22)" fg:x="926" fg:w="2"/><text x="98.7606%" y="1087.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.21%)</title><rect x="98.5106%" y="1061" width="0.2128%" height="15" fill="rgb(225,218,4)" fg:x="926" fg:w="2"/><text x="98.7606%" y="1071.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.21%)</title><rect x="98.5106%" y="1045" width="0.2128%" height="15" fill="rgb(230,182,32)" fg:x="926" fg:w="2"/><text x="98.7606%" y="1055.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.11%)</title><rect x="98.6170%" y="1029" width="0.1064%" height="15" fill="rgb(242,56,43)" fg:x="927" fg:w="1"/><text x="98.8670%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.11%)</title><rect x="98.6170%" y="1013" width="0.1064%" height="15" fill="rgb(233,99,24)" fg:x="927" fg:w="1"/><text x="98.8670%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.11%)</title><rect x="98.6170%" y="997" width="0.1064%" height="15" fill="rgb(234,209,42)" fg:x="927" fg:w="1"/><text x="98.8670%" y="1007.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.11%)</title><rect x="98.6170%" y="981" width="0.1064%" height="15" fill="rgb(227,7,12)" fg:x="927" fg:w="1"/><text x="98.8670%" y="991.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.6170%" y="965" width="0.1064%" height="15" fill="rgb(245,203,43)" fg:x="927" fg:w="1"/><text x="98.8670%" y="975.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.6170%" y="949" width="0.1064%" height="15" fill="rgb(238,205,33)" fg:x="927" fg:w="1"/><text x="98.8670%" y="959.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.11%)</title><rect x="98.6170%" y="933" width="0.1064%" height="15" fill="rgb(231,56,7)" fg:x="927" fg:w="1"/><text x="98.8670%" y="943.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.11%)</title><rect x="98.6170%" y="917" width="0.1064%" height="15" fill="rgb(244,186,29)" fg:x="927" fg:w="1"/><text x="98.8670%" y="927.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.11%)</title><rect x="98.6170%" y="901" width="0.1064%" height="15" fill="rgb(234,111,31)" fg:x="927" fg:w="1"/><text x="98.8670%" y="911.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.11%)</title><rect x="98.7234%" y="1125" width="0.1064%" height="15" fill="rgb(241,149,10)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1135.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.11%)</title><rect x="98.7234%" y="1109" width="0.1064%" height="15" fill="rgb(249,206,44)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1119.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.11%)</title><rect x="98.7234%" y="1093" width="0.1064%" height="15" fill="rgb(251,153,30)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1103.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.11%)</title><rect x="98.7234%" y="1077" width="0.1064%" height="15" fill="rgb(239,152,38)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1087.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="1061" width="0.1064%" height="15" fill="rgb(249,139,47)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1071.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.11%)</title><rect x="98.7234%" y="1045" width="0.1064%" height="15" fill="rgb(244,64,35)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1055.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.11%)</title><rect x="98.7234%" y="1029" width="0.1064%" height="15" fill="rgb(216,46,15)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1039.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="1013" width="0.1064%" height="15" fill="rgb(250,74,19)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1023.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="997" width="0.1064%" height="15" fill="rgb(249,42,33)" fg:x="928" fg:w="1"/><text x="98.9734%" y="1007.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="981" width="0.1064%" height="15" fill="rgb(242,149,17)" fg:x="928" fg:w="1"/><text x="98.9734%" y="991.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="965" width="0.1064%" height="15" fill="rgb(244,29,21)" fg:x="928" fg:w="1"/><text x="98.9734%" y="975.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="949" width="0.1064%" height="15" fill="rgb(220,130,37)" fg:x="928" fg:w="1"/><text x="98.9734%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.11%)</title><rect x="98.7234%" y="933" width="0.1064%" height="15" fill="rgb(211,67,2)" fg:x="928" fg:w="1"/><text x="98.9734%" y="943.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.11%)</title><rect x="98.7234%" y="917" width="0.1064%" height="15" fill="rgb(235,68,52)" fg:x="928" fg:w="1"/><text x="98.9734%" y="927.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.11%)</title><rect x="98.7234%" y="901" width="0.1064%" height="15" fill="rgb(246,142,3)" fg:x="928" fg:w="1"/><text x="98.9734%" y="911.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.11%)</title><rect x="98.7234%" y="885" width="0.1064%" height="15" fill="rgb(241,25,7)" fg:x="928" fg:w="1"/><text x="98.9734%" y="895.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="869" width="0.1064%" height="15" fill="rgb(242,119,39)" fg:x="928" fg:w="1"/><text x="98.9734%" y="879.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="853" width="0.1064%" height="15" fill="rgb(241,98,45)" fg:x="928" fg:w="1"/><text x="98.9734%" y="863.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="837" width="0.1064%" height="15" fill="rgb(254,28,30)" fg:x="928" fg:w="1"/><text x="98.9734%" y="847.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="821" width="0.1064%" height="15" fill="rgb(241,142,54)" fg:x="928" fg:w="1"/><text x="98.9734%" y="831.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="805" width="0.1064%" height="15" fill="rgb(222,85,15)" fg:x="928" fg:w="1"/><text x="98.9734%" y="815.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.11%)</title><rect x="98.7234%" y="789" width="0.1064%" height="15" fill="rgb(210,85,47)" fg:x="928" fg:w="1"/><text x="98.9734%" y="799.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::VisitCreateBlockContext (1 samples, 0.11%)</title><rect x="98.7234%" y="773" width="0.1064%" height="15" fill="rgb(224,206,25)" fg:x="928" fg:w="1"/><text x="98.9734%" y="783.50"></text></g><g><title>deno`v8::internal::baseline::detail::PushAllHelper&lt;v8::internal::Register, v8::internal::Handle&lt;v8::internal::ScopeInfo&gt; &gt;::Push(v8::internal::baseline::BaselineAssembler*, v8::internal::Register, v8::internal::Handle (1 samples, 0.11%)</title><rect x="98.7234%" y="757" width="0.1064%" height="15" fill="rgb(243,201,19)" fg:x="928" fg:w="1"/><text x="98.9734%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (930 samples, 98.94%)</title><rect x="0.0000%" y="1157" width="98.9362%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="930"/><text x="0.2500%" y="1167.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.64%)</title><rect x="98.2979%" y="1141" width="0.6383%" height="15" fill="rgb(254,179,45)" fg:x="924" fg:w="6"/><text x="98.5479%" y="1151.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="98.8298%" y="1125" width="0.1064%" height="15" fill="rgb(226,14,10)" fg:x="929" fg:w="1"/><text x="99.0798%" y="1135.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="98.8298%" y="1109" width="0.1064%" height="15" fill="rgb(244,27,41)" fg:x="929" fg:w="1"/><text x="99.0798%" y="1119.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.11%)</title><rect x="98.8298%" y="1093" width="0.1064%" height="15" fill="rgb(235,35,32)" fg:x="929" fg:w="1"/><text x="99.0798%" y="1103.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.11%)</title><rect x="98.8298%" y="1077" width="0.1064%" height="15" fill="rgb(218,68,31)" fg:x="929" fg:w="1"/><text x="99.0798%" y="1087.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.11%)</title><rect x="98.8298%" y="1061" width="0.1064%" height="15" fill="rgb(207,120,37)" fg:x="929" fg:w="1"/><text x="99.0798%" y="1071.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.11%)</title><rect x="98.9362%" y="1157" width="0.1064%" height="15" fill="rgb(227,98,0)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1167.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::proc_state::Inner&gt; (1 samples, 0.11%)</title><rect x="98.9362%" y="1141" width="0.1064%" height="15" fill="rgb(207,7,3)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1151.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rustls::anchors::OwnedTrustAnchor&gt;&gt; (1 samples, 0.11%)</title><rect x="98.9362%" y="1125" width="0.1064%" height="15" fill="rgb(206,98,19)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1135.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="98.9362%" y="1109" width="0.1064%" height="15" fill="rgb(217,5,26)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1119.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25098 (1 samples, 0.11%)</title><rect x="98.9362%" y="1093" width="0.1064%" height="15" fill="rgb(235,190,38)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="98.9362%" y="1077" width="0.1064%" height="15" fill="rgb(247,86,24)" fg:x="930" fg:w="1"/><text x="99.1862%" y="1087.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (932 samples, 99.15%)</title><rect x="0.0000%" y="1189" width="99.1489%" height="15" fill="rgb(205,101,16)" fg:x="0" fg:w="932"/><text x="0.2500%" y="1199.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (932 samples, 99.15%)</title><rect x="0.0000%" y="1173" width="99.1489%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="932"/><text x="0.2500%" y="1183.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::worker::CliMainWorker&gt; (1 samples, 0.11%)</title><rect x="99.0426%" y="1157" width="0.1064%" height="15" fill="rgb(231,114,1)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1167.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_runtime::worker::MainWorker&gt; (1 samples, 0.11%)</title><rect x="99.0426%" y="1141" width="0.1064%" height="15" fill="rgb(207,184,53)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1151.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRuntime&gt; (1 samples, 0.11%)</title><rect x="99.0426%" y="1125" width="0.1064%" height="15" fill="rgb(224,95,51)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1135.50"></text></g><g><title>deno`&lt;v8::isolate::OwnedIsolate as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="99.0426%" y="1109" width="0.1064%" height="15" fill="rgb(212,188,45)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1119.50"></text></g><g><title>deno`v8::Isolate::LowMemoryNotification (1 samples, 0.11%)</title><rect x="99.0426%" y="1093" width="0.1064%" height="15" fill="rgb(223,154,38)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1103.50"></text></g><g><title>deno`v8::internal::Heap::CollectAllAvailableGarbage (1 samples, 0.11%)</title><rect x="99.0426%" y="1077" width="0.1064%" height="15" fill="rgb(251,22,52)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.11%)</title><rect x="99.0426%" y="1061" width="0.1064%" height="15" fill="rgb(229,209,22)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1071.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.11%)</title><rect x="99.0426%" y="1045" width="0.1064%" height="15" fill="rgb(234,138,34)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1055.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Prologue (1 samples, 0.11%)</title><rect x="99.0426%" y="1029" width="0.1064%" height="15" fill="rgb(212,95,11)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1039.50"></text></g><g><title>deno`v8::internal::SemiSpace::Commit (1 samples, 0.11%)</title><rect x="99.0426%" y="1013" width="0.1064%" height="15" fill="rgb(240,179,47)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1023.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.11%)</title><rect x="99.0426%" y="997" width="0.1064%" height="15" fill="rgb(240,163,11)" fg:x="931" fg:w="1"/><text x="99.2926%" y="1007.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.11%)</title><rect x="99.0426%" y="981" width="0.1064%" height="15" fill="rgb(236,37,12)" fg:x="931" fg:w="1"/><text x="99.2926%" y="991.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.11%)</title><rect x="99.0426%" y="965" width="0.1064%" height="15" fill="rgb(232,164,16)" fg:x="931" fg:w="1"/><text x="99.2926%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.11%)</title><rect x="99.0426%" y="949" width="0.1064%" height="15" fill="rgb(244,205,15)" fg:x="931" fg:w="1"/><text x="99.2926%" y="959.50"></text></g><g><title>dyld`start (933 samples, 99.26%)</title><rect x="0.0000%" y="1301" width="99.2553%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1311.50">dyld`start</text></g><g><title>deno`main (933 samples, 99.26%)</title><rect x="0.0000%" y="1285" width="99.2553%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1295.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (933 samples, 99.26%)</title><rect x="0.0000%" y="1269" width="99.2553%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1279.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (933 samples, 99.26%)</title><rect x="0.0000%" y="1253" width="99.2553%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1263.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (933 samples, 99.26%)</title><rect x="0.0000%" y="1237" width="99.2553%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1247.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (933 samples, 99.26%)</title><rect x="0.0000%" y="1221" width="99.2553%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1231.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (933 samples, 99.26%)</title><rect x="0.0000%" y="1205" width="99.2553%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="933"/><text x="0.2500%" y="1215.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.11%)</title><rect x="99.1489%" y="1189" width="0.1064%" height="15" fill="rgb(214,194,35)" fg:x="932" fg:w="1"/><text x="99.3989%" y="1199.50"></text></g><g><title>deno`deno::args::flags::clap_root (1 samples, 0.11%)</title><rect x="99.1489%" y="1173" width="0.1064%" height="15" fill="rgb(249,28,3)" fg:x="932" fg:w="1"/><text x="99.3989%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.11%)</title><rect x="99.2553%" y="1173" width="0.1064%" height="15" fill="rgb(222,56,52)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1183.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (1 samples, 0.11%)</title><rect x="99.2553%" y="1157" width="0.1064%" height="15" fill="rgb(245,217,50)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (1 samples, 0.11%)</title><rect x="99.2553%" y="1141" width="0.1064%" height="15" fill="rgb(213,201,24)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.11%)</title><rect x="99.2553%" y="1125" width="0.1064%" height="15" fill="rgb(248,116,28)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (1 samples, 0.11%)</title><rect x="99.2553%" y="1109" width="0.1064%" height="15" fill="rgb(219,72,43)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (1 samples, 0.11%)</title><rect x="99.2553%" y="1093" width="0.1064%" height="15" fill="rgb(209,138,14)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitLdaGlobal (1 samples, 0.11%)</title><rect x="99.2553%" y="1077" width="0.1064%" height="15" fill="rgb(222,18,33)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MakeNode (1 samples, 0.11%)</title><rect x="99.2553%" y="1061" width="0.1064%" height="15" fill="rgb(213,199,7)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::Graph::NewNode (1 samples, 0.11%)</title><rect x="99.2553%" y="1045" width="0.1064%" height="15" fill="rgb(250,110,10)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::Node* v8::internal::compiler::Node::NewImpl&lt;v8::internal::compiler::Node*&gt; (1 samples, 0.11%)</title><rect x="99.2553%" y="1029" width="0.1064%" height="15" fill="rgb(248,123,6)" fg:x="933" fg:w="1"/><text x="99.5053%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (1 samples, 0.11%)</title><rect x="99.3617%" y="1157" width="0.1064%" height="15" fill="rgb(206,91,31)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (1 samples, 0.11%)</title><rect x="99.3617%" y="1141" width="0.1064%" height="15" fill="rgb(211,154,13)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::LinearizeEffectControl (1 samples, 0.11%)</title><rect x="99.3617%" y="1125" width="0.1064%" height="15" fill="rgb(225,148,7)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::Run (1 samples, 0.11%)</title><rect x="99.3617%" y="1109" width="0.1064%" height="15" fill="rgb(220,160,43)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::ProcessNode (1 samples, 0.11%)</title><rect x="99.3617%" y="1093" width="0.1064%" height="15" fill="rgb(213,52,39)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::TryWireInStateEffect (1 samples, 0.11%)</title><rect x="99.3617%" y="1077" width="0.1064%" height="15" fill="rgb(243,137,7)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizer::LowerCheckedTaggedToTaggedSigned (1 samples, 0.11%)</title><rect x="99.3617%" y="1061" width="0.1064%" height="15" fill="rgb(230,79,13)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::GraphAssembler::Word32And (1 samples, 0.11%)</title><rect x="99.3617%" y="1045" width="0.1064%" height="15" fill="rgb(247,105,23)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::Node* v8::internal::compiler::Node::NewImpl&lt;v8::internal::compiler::Node*&gt; (1 samples, 0.11%)</title><rect x="99.3617%" y="1029" width="0.1064%" height="15" fill="rgb(223,179,41)" fg:x="934" fg:w="1"/><text x="99.6117%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.11%)</title><rect x="99.4681%" y="1157" width="0.1064%" height="15" fill="rgb(218,9,34)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.11%)</title><rect x="99.4681%" y="1141" width="0.1064%" height="15" fill="rgb(222,106,8)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.11%)</title><rect x="99.4681%" y="1125" width="0.1064%" height="15" fill="rgb(211,220,0)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.11%)</title><rect x="99.4681%" y="1109" width="0.1064%" height="15" fill="rgb(229,52,16)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.11%)</title><rect x="99.4681%" y="1093" width="0.1064%" height="15" fill="rgb(212,155,18)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::BranchElimination::ReduceBranch (1 samples, 0.11%)</title><rect x="99.4681%" y="1077" width="0.1064%" height="15" fill="rgb(242,21,14)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::BranchElimination::SimplifyBranchCondition (1 samples, 0.11%)</title><rect x="99.4681%" y="1061" width="0.1064%" height="15" fill="rgb(222,19,48)" fg:x="935" fg:w="1"/><text x="99.7181%" y="1071.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.11%)</title><rect x="99.5745%" y="1157" width="0.1064%" height="15" fill="rgb(232,45,27)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (1 samples, 0.11%)</title><rect x="99.5745%" y="1141" width="0.1064%" height="15" fill="rgb(249,103,42)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (1 samples, 0.11%)</title><rect x="99.5745%" y="1125" width="0.1064%" height="15" fill="rgb(246,81,33)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunRetypePhase (1 samples, 0.11%)</title><rect x="99.5745%" y="1109" width="0.1064%" height="15" fill="rgb(252,33,42)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RetypeNode (1 samples, 0.11%)</title><rect x="99.5745%" y="1093" width="0.1064%" height="15" fill="rgb(209,212,41)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::UpdateFeedbackType (1 samples, 0.11%)</title><rect x="99.5745%" y="1077" width="0.1064%" height="15" fill="rgb(207,154,6)" fg:x="936" fg:w="1"/><text x="99.8245%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (1 samples, 0.11%)</title><rect x="99.6809%" y="1157" width="0.1064%" height="15" fill="rgb(223,64,47)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (1 samples, 0.11%)</title><rect x="99.6809%" y="1141" width="0.1064%" height="15" fill="rgb(211,161,38)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.11%)</title><rect x="99.6809%" y="1125" width="0.1064%" height="15" fill="rgb(219,138,40)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.11%)</title><rect x="99.6809%" y="1109" width="0.1064%" height="15" fill="rgb(241,228,46)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.11%)</title><rect x="99.6809%" y="1093" width="0.1064%" height="15" fill="rgb(223,209,38)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::CheckpointElimination::ReduceCheckpoint (1 samples, 0.11%)</title><rect x="99.6809%" y="1077" width="0.1064%" height="15" fill="rgb(236,164,45)" fg:x="937" fg:w="1"/><text x="99.9309%" y="1087.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (6 samples, 0.64%)</title><rect x="99.2553%" y="1237" width="0.6383%" height="15" fill="rgb(231,15,5)" fg:x="933" fg:w="6"/><text x="99.5053%" y="1247.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (6 samples, 0.64%)</title><rect x="99.2553%" y="1221" width="0.6383%" height="15" fill="rgb(252,35,15)" fg:x="933" fg:w="6"/><text x="99.5053%" y="1231.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (6 samples, 0.64%)</title><rect x="99.2553%" y="1205" width="0.6383%" height="15" fill="rgb(248,181,18)" fg:x="933" fg:w="6"/><text x="99.5053%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (6 samples, 0.64%)</title><rect x="99.2553%" y="1189" width="0.6383%" height="15" fill="rgb(233,39,42)" fg:x="933" fg:w="6"/><text x="99.5053%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (5 samples, 0.53%)</title><rect x="99.3617%" y="1173" width="0.5319%" height="15" fill="rgb(238,110,33)" fg:x="934" fg:w="5"/><text x="99.6117%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (1 samples, 0.11%)</title><rect x="99.7872%" y="1157" width="0.1064%" height="15" fill="rgb(233,195,10)" fg:x="938" fg:w="1"/><text x="100.0372%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (1 samples, 0.11%)</title><rect x="99.7872%" y="1141" width="0.1064%" height="15" fill="rgb(254,105,3)" fg:x="938" fg:w="1"/><text x="100.0372%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.11%)</title><rect x="99.7872%" y="1125" width="0.1064%" height="15" fill="rgb(221,225,9)" fg:x="938" fg:w="1"/><text x="100.0372%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.11%)</title><rect x="99.7872%" y="1109" width="0.1064%" height="15" fill="rgb(224,227,45)" fg:x="938" fg:w="1"/><text x="100.0372%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (1 samples, 0.11%)</title><rect x="99.7872%" y="1093" width="0.1064%" height="15" fill="rgb(229,198,43)" fg:x="938" fg:w="1"/><text x="100.0372%" y="1103.50"></text></g><g><title>all (940 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(206,209,35)" fg:x="0" fg:w="940"/><text x="0.2500%" y="1327.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (7 samples, 0.74%)</title><rect x="99.2553%" y="1301" width="0.7447%" height="15" fill="rgb(245,195,53)" fg:x="933" fg:w="7"/><text x="99.5053%" y="1311.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (7 samples, 0.74%)</title><rect x="99.2553%" y="1285" width="0.7447%" height="15" fill="rgb(240,92,26)" fg:x="933" fg:w="7"/><text x="99.5053%" y="1295.50"></text></g><g><title>deno`v8::base::ThreadEntry (7 samples, 0.74%)</title><rect x="99.2553%" y="1269" width="0.7447%" height="15" fill="rgb(207,40,23)" fg:x="933" fg:w="7"/><text x="99.5053%" y="1279.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (7 samples, 0.74%)</title><rect x="99.2553%" y="1253" width="0.7447%" height="15" fill="rgb(223,111,35)" fg:x="933" fg:w="7"/><text x="99.5053%" y="1263.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (1 samples, 0.11%)</title><rect x="99.8936%" y="1237" width="0.1064%" height="15" fill="rgb(229,147,28)" fg:x="939" fg:w="1"/><text x="100.1436%" y="1247.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ParallelClearingJob::Run (1 samples, 0.11%)</title><rect x="99.8936%" y="1221" width="0.1064%" height="15" fill="rgb(211,29,28)" fg:x="939" fg:w="1"/><text x="100.1436%" y="1231.50"></text></g><g><title>deno`v8::internal::InternalizedStringTableCleaner::VisitRootPointers (1 samples, 0.11%)</title><rect x="99.8936%" y="1205" width="0.1064%" height="15" fill="rgb(228,72,33)" fg:x="939" fg:w="1"/><text x="100.1436%" y="1215.50"></text></g></svg></svg>